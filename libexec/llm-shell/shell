#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../../lib/llm/shell"

def main(argv)
  options = {tools: []}
  option_parser.parse(argv, into: options)
  if argv.empty? || options[:provider].nil?
    warn option_parser.help
    throw(:exit, 1)
  else
    LLM::Shell.new(options).start
  end
end

def option_parser
  OptionParser.new do |o|
    o.banner = "Usage: llm-shell [OPTIONS]"
    o.on("-p PROVIDER", "--provider NAME", "Required. Options: gemini, openai, anthropic, or ollama.", String)
    o.on("-k [KEY]", "--key [KEY]", "Optional. Required by gemini, openai, and anthropic.", String)
    o.on("-m [MODEL]", "--model [MODEL]", "Optional. The name of a model.", Array)
    o.on("-h [HOST]", "--host [HOST]", "Optional. Sometimes required by ollama.", String)
    o.on("-o [PORT]", "--port [PORT]", "Optional. Sometimes required by ollama.", Integer)
    o.on("-f [GLOB]", "--files [GLOB]", "Optional. Glob pattern(s) separated by a comma.", Array)
    o.on("-t [TOOLS]", "--tools [TOOLS]", "Optional. One or more tool names to load automatically.", Array)
  end
end

excode = catch(:exit) {
  main(ARGV)
  0
}
exit excode
